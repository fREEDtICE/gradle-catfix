/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'yuantong' at '12/28/15 5:47 PM' with Gradle 2.2.1
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html
 */

/*
// Apply the java plugin to add support for Java
apply plugin: 'java'

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

// In this section you declare the dependencies for your production and test code
dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.7'

    // Declare the dependency for your favourite test framework you want to use in your tests.
    // TestNG is also supported by the Gradle Test task. Just change the
    // testCompile dependency to testCompile 'org.testng:testng:6.8.1' and add
    // 'test.useTestNG()' to your build script.
    testCompile "junit:junit:4.11"
}
*/
import org.ajoberstar.grgit.*

buildscript {
  repositories {
    mavenCentral()
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }

  dependencies {
    classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    classpath 'org.ajoberstar:gradle-git:0.11.2'
//        classpath "com.gradle.publish:plugin-publish-plugin:0.9.0"
  }
}

apply plugin: 'groovy'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'io.codearte.nexus-staging'



repositories {
  mavenCentral()
}

group = 'com.github.freedtice'
version = '0.1.1'

sourceCompatibility = '1.6'

configurations {
  provided
}

sourceSets {
  main {
    compileClasspath += configurations.provided
  }
}

nexusStaging {
  username = project.getProperty('sonatype.username')
  password = project.getProperty('sonatype.password')

}

dependencies {
  compile gradleApi()
  compile localGroovy()
  compile 'org.javassist:javassist:3.18.2-GA'

  provided 'com.android.tools.build:gradle:1.0.0'
  testCompile 'com.android.tools.build:gradle:1.0.0'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from 'build/docs/javadoc'
}


task sourcesJar(type: Jar) {
  from sourceSets.main.allSource
  classifier = 'sources'
}

artifacts {
  archives jar
  archives javadocJar
  archives sourcesJar
}

signing {
  sign configurations.archives
}

if (project.hasProperty('sonatype.username') && project.hasProperty('sonatype.password')) {
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { deployment -> signing.signPom(deployment) }

        def repoUrl
        if (project.version.endsWith("SNAPSHOT")) {
          repoUrl = "https://oss.sonatype.org/content/repositories/snapshots"
        } else {
          repoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        }

        repository(url: repoUrl) {
          authentication(
              userName: project.getProperty('sonatype.username'),
              password: project.getProperty('sonatype.password'))
        }

        pom.project {
          name 'gradle-catfix'
          packaging 'jar'
          description 'This project is gradle plugin for Catfix. with this tool, you can build your patch dex file with one command. then you can use hot fix from Catfix'
          url 'https://github.com/fREEDtICE/gradle-catfix'

          scm {
            url 'git@github.com:fREEDtICE/gradle-catfix.git'
            connection 'scm:git:git@github.com:fREEDtICE/gradle-catfix.git'
            developerConnection 'scm:git:git@github.com:fREEDtICE/gradle-catfix.git'
          }

          licenses {
            license {
              name 'The Apache Software License, Version 2.0'
              url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution 'repo'
            }
          }

          developers {
            developer {
              id 'fREEDtICE'
              name 'Xu Yuantong'
            }
          }
        }
      }
    }
  }

  def grgit = Grgit.open(project.projectDir)

  task checkRelease << {
    def readmeVersion = file('README.md').readLines().find { it.contains('com.github.freedtice:gradle-catfix:') }?.trim()

    if (readmeVersion == null) {
      throw new ProjectConfigurationException("Missing README version string", null)
    }

    if (!readmeVersion.contains(":$version")) {
      throw new ProjectConfigurationException("README version string: $readmeVersion must match release version: $version", null)
    }

    def changelogVersion = file('CHANGELOG.md').readLines().find { it.contains("### $version") }
    if (changelogVersion == null) {
      throw new ProjectConfigurationException("CHANGELOG does not contain changes for release version: $version", null)
    }

    def branchName = grgit.branch.current.name
    if (branchName != 'master') {
      throw new ProjectConfigurationException("Branch: $branchName must be master", null)
    }
  }

  task tagRelease(dependsOn: [checkRelease]) << {
    grgit.tag.add {
      name = "v$version"
      message = "Release of $version"
    }
  }

  if (!version.endsWith('SNAPSHOT')) {
    uploadArchives.dependsOn(tagRelease)
  }
}
